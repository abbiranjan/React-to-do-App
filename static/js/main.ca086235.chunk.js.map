{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/Header.js","components/AddTodo.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","title","id","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","React","headerStyle","textAlign","linkStyle","Header","to","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","flex","placeholder","autoComplete","className","About","Fragment","App","axios","delete","then","res","filter","post","data","get","console","log","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca086235.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TodoItem extends Component {\r\n  getStyle = () =>{\r\n    //   if(this.props.todo.completed){\r\n    //       return{\r\n    //           textDecoration: 'line-through'\r\n    //       }\r\n    //   }else {\r\n    //       return{\r\n    //           textDecoration: 'none'\r\n    //       }\r\n    //   }\r\n    return {\r\n        background: '#f4f4f4',\r\n        padding: '10px',\r\n        borderBottom: '1px dotted #ccc',\r\n        textDecoration: this.props.todo.completed ? 'line-through': 'none'\r\n    }\r\n  }  \r\n  // markComplete=(e)=>{\r\n  //   console.log(this.props.todo)\r\n  // }\r\n  render() {\r\n    const {title, id} = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> {' '}\r\n          {title}\r\n          <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>x</button>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst btnStyle = {\r\n  background: '#ff0000',\r\n  color: '#fff',\r\n  border: 'none',\r\n  padding: '5px 10px',\r\n  borderRadius: '50%',\r\n  cursor: 'pointer',\r\n  float: 'right'\r\n}\r\n//PropType Validation\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\nexport default TodoItem\r\n","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends React.Component{\r\n    // markComplete = ()=>{\r\n    //     console.log('Hello');\r\n    // }\r\n    render(){\r\n        return(\r\n            <div>\r\n                {this.props.todos.map((todo)=>{\r\n                  return (\r\n                    <TodoItem key={todo.id} todo={todo} \r\n                        markComplete={this.props.markComplete} delTodo={this.props.delTodo} />\r\n                  )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//PropTypes Validation\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Header = ()=>{\r\n    return(\r\n        <header style={headerStyle}>\r\n            <h1>ToDo App</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> |\r\n            <Link style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    padding: '10px',\r\n    textAlign: 'center'\r\n}\r\nconst linkStyle = {\r\n    color: '#fff'\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass AddTodo extends React.Component{\r\n    state = {\r\n        title: ''\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({\r\n            title: ''\r\n        });\r\n    }\r\n    render(){\r\n        return(\r\n            <form style={{display: 'flex'}} onSubmit={this.onSubmit}>\r\n                <input \r\n                    style={{flex: '10', padding: '5px'}}\r\n                    type=\"text\" \r\n                    value={this.state.title}\r\n                    name=\"title\" \r\n                    placeholder=\"Add to-do item...\"\r\n                    autoComplete=\"off\"\r\n                    onChange={this.onChange}/>\r\n                <input \r\n                    type=\"submit\" \r\n                    value=\"Submit\"\r\n                    className=\"btn\"\r\n                    style={{flex: '1'}}/>    \r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo;","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is TodoList App v1.0.0. It is part of React Crash Course.</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\nimport './App.css';\nimport Todos from './components/Todos';\nimport Header from './components/Header';\nimport AddTodo from './components/AddTodo';\n//import uuid from 'uuid';\nimport About from './components/About';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {\n    todos : [\n        // For reference while starting development on initial phase\n        // {\n        //     id: uuid(),\n        //     title: 'Take out the trash',\n        //     completed: false\n        // },\n        // {\n        //     id: uuid(),\n        //     title: 'Dinner with wife',\n        //     completed: false\n        // },\n        // {\n        //     id: uuid(),\n        //     title: 'Metting with boss',\n        //     completed: true\n        // }\n    ]\n}\ncomponentDidMount() {\n  axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n    .then((res) => {\n      console.log(res);\n      this.setState({\n        todos: res.data\n      });\n    })\n}\n//Toggle Checkbox\nmarkComplete = (id)=>{\n  this.setState({\n    todos: this.state.todos.map((todo)=>{\n      if(todo.id === id){\n        todo.completed = !todo.completed\n      }\n      return todo;\n    })\n  })\n}\n//Delete to-do items\n// delTodo = (id) =>{\n//   this.setState({\n//     todos:[...this.state.todos.filter((todo)=>{\n//       return ( todo.id !== id)\n//     })]\n//   });\n// };\ndelTodo = (id) =>{\n  axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n  .then(res =>this.setState({\n    todos:[...this.state.todos.filter((todo)=>{\n      return ( todo.id !== id)\n    })]\n  }))\n};\n\n//Add Todo Item\naddTodo = (title) =>{\n  // const newTodo ={\n  //   id: uuid(),\n  //   title: title,\n  //   completed: false\n  // }\n  axios.post('https://jsonplaceholder.typicode.com/todos', {\n    title, //no key value pair as both are same\n    completed:false\n  })\n  .then(res =>{\n    this.setState({\n         todos: [...this.state.todos, res.data]\n       });\n  });\n  // this.setState({\n  //   todos: [...this.state.todos, newTodo]\n  // })\n}\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo} />\n                <Todos todos={this.state.todos} \n                  markComplete={this.markComplete} delTodo={this.delTodo} />\n              </React.Fragment>\n            )}/>\n            <Route exact path=\"/about\" component={About}/>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}